#!/bin/bash

# Check Point remote operations on multiple targets

# Usage: cpr <target> <command> [command_args]

# requirements:
#   - Gaia R81+ (tested on R81.10)
#   - bash 4.4+ (R81.10 contains bash 4.4.19)

# TODO:
# - unify required escaping for cprid_util and ssh targets
# - get targets from cluster objects
# - get all targets of a given category (e.g. all gateways)
# - allow selecting VSes to execute a command on

diff_tool='diff'

help () {
    # NOTE: The following here document must be indented by tabs, not spaces.
    cat <<- +++EOF+++
		cpr executes a command on multiple Check Point targets.

		Usage: cpr [options] <target> <command> [args]

		Options:
		    -d  Show the differences between the outputs of the commands on the targets.
		    -D  Debug mode. Print the executed commands.
		    -U  Number of lines of context to show in the diff. Default: 3.
		    -h  Show this help.

		Target:
		    If <target> starts with @, it is interpreted as a group name.
		    The group content is read from a file named target_group_<group_name>.txt
		    in the ../conf/ directory relative to the directory of this script.
		    Target @@ lists the existing groups.

		    If <target> contains a single @ in the middle, it is interpreted as an SSH target.

		Command:
		    On a VSX target you can execute certain commands on all VSes by using
		    the command: ip -all netns exec <command> [args]

		    ATTENTION: Command args are modified by replacing " with '.
		        Do not use double quotes around text to be expanded by the remote shell.

		    If functions like vsenv are needed, you need to start a login shell
		    or source /etc/bashrc. See the examples below.

		Examples:
		    cpr @hu_pro ip -all netns exec fw ctl fast_accel show_table
		    cpr @hu_pro bash -c '. /etc/bashrc ; vsenv 2 ; du -sh \$FWDIR/log/'
		    cpr @hu_pro su -s /bin/bash -c 'vsenv 3 ; ip addr' - admin
		    cpr @hu_pro sh -c 'top -bn2 | awk "/^top / {f++} f==2" | head -n15'
		    cpr -d @cz_tda_mho "clish -c 'show configuration'"

		+++EOF+++
}

do_diff=
diff_param_U=-u
while getopts 'dDhU:' opt ; do
    case $opt in
        d)
            do_diff=1
            ;;
        D)
            PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
            set -x
            ;;
        h)
            help
            exit 0
            ;;
        U)
            diff_param_U=-U$OPTARG
            ;;
        *)
            help
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if test "$#" -lt 2 -a "$1" != @@ ; then
    help
    exit 1
fi

targets=("$1")
shift

bash_lib_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )/lib_sh"

# shellcheck source=/dev/null
# shellcheck source=../lib_sh/targets.bash      # FIXME: This directive does not work.
source "${bash_lib_dir}/targets.bash"

targets_expand

# Run the command on the target in $1.
run_command () {
    local target="$1"
    shift
    if printf '%s' "$target" | grep -Eq '[^@]+@[^@]+'; then
        # Target containing a single @ in the middle is an SSH target.
        # shellcheck disable=SC2029		# We want to expand $@ here.
        ssh -q "$target" "$@"
    else
        cprid_util -server "$target" -verbose rexec -rcmd "$@"
    fi
}

# Process all targets. If $do_diff is set, save the output of each target in a file.
process_targets () {
    local do_diff="$1"
    shift
    for target in "$@" ; do
        if [ -z "$do_diff" ] ; then
            echo "--- target: ${target}"
            run_command "$target" "${cmd_args[@]}"
        else
            run_command "$target" "${cmd_args[@]}" > "output-${target}.txt"
        fi
    done
}

cmd_args=("$@")

if [ -z "$do_diff" ] ; then
    process_targets "$do_diff" "${targets[@]}"
else
    # Create a temporary directory for all the working files.
    tmp_dir=$(mktemp -d)
    trap 'rm -rf "$tmp_dir"' EXIT

    cd "$tmp_dir" || {
        echo "Error: Could not change to the temporary directory $tmp_dir." >&2
        exit 1
    }

    process_targets "$do_diff" "${targets[@]}"

    # Use diff to compare the outputs.
    # According to the number of targets
    case "${#targets[@]}" in
        1)
            echo "=== ${targets[0]} ==="
            cat "output-${targets[0]}.txt"
            ;;
        2)
            # shellcheck disable=SC2086		# We want to word-split $diff_param.
            $diff_tool $diff_param_U "output-${targets[0]}.txt" "output-${targets[1]}.txt"
            ;;
        *)
            vimdiff output-*.txt
            ;;
    esac
fi
